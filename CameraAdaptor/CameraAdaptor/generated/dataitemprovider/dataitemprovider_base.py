# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict

from .dataitemprovider_types import CaptureImage_Responses, StoreImage_Responses

if TYPE_CHECKING:

    from ...server import Server


class DataItemProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Camera provider server that captures and stores a single image with the connected camera.
        In the mocked state the concentration of SDS is retrieved from the data service,
        this concentration is used to generate an image approximately representing the drop as it would look with that concentration of SDS.

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def CaptureImage(self, *, metadata: MetadataDict) -> CaptureImage_Responses:
        """
        Capture a single image with the connected camera.


        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def StoreImage(self, ItemPath: str, *, metadata: MetadataDict) -> StoreImage_Responses:
        """
        Store image in experimental data storage


        :param ItemPath: Storage location of the data item in the form of a file path.

        :param metadata: The SiLA Client Metadata attached to the call

        """
