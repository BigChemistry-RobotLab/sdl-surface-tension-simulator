# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING
import datetime
from DataService.DataService import Client as DataClient

from sila2.server import MetadataDict

from ..generated.binarysearchcontroller import (
    BinarySearchControllerBase,
    CalculateMidPoint_Responses,
    InitializeExperimentParameters_Responses,
    StoreMidPoint_Responses,
    UpdateSearchRange_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


class BinarySearchControllerImpl(BinarySearchControllerBase):
    def __init__(self, parent_server: Server) -> None:
        self.dataService = DataClient(address="127.0.0.1",  port=50052, insecure=True)
        super().__init__(parent_server=parent_server)

    def InitializeExperimentParameters(
        self, High: float, Low: float, Target: float, *, metadata: MetadataDict
    ) -> InitializeExperimentParameters_Responses:
        self.high = High
        self.low = Low
        self.target = Target
        return InitializeExperimentParameters_Responses()

    def UpdateSearchRange(self, MeasurementPath: str, *, metadata: MetadataDict) -> UpdateSearchRange_Responses:
        measurementItem = self.dataService.DataItemProvider.GetDataItem(ItemPath=MeasurementPath)
        measurement = float(measurementItem.DataItemContent.decode('utf-8'))
        if measurement < self.target:
            self.low = self.mid
        else:
            self.high = self.mid

    def CalculateMidPoint(self, *, metadata: MetadataDict) -> CalculateMidPoint_Responses:
        self.mid = (self.low + self.high) / 2.0
        return CalculateMidPoint_Responses()

    def StoreMidPoint(self, ItemPath: str, *, metadata: MetadataDict) -> StoreMidPoint_Responses:
        self.dataService.DataItemProvider.CreateDataItem(
            ItemPath=ItemPath,
            Content=str(self.mid).encode(encoding='utf-8'),
            ItemProperties= [
                tuple(["creation_time", f"{datetime.datetime.now().timestamp()}"]),
            ]
        )
