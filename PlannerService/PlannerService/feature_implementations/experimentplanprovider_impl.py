# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING
from DataService.DataService import Client as DataClient
import datetime
import json

from sila2.server import MetadataDict

from ..generated.experimentplanprovider import (
    CreateExperimentPlan_Responses,
    ExperimentPlanProviderBase,
    StoreExperimentPlan_Responses,
    SubmitExperimentDesignPlan_Responses,
)

if TYPE_CHECKING:
    from ..server import Server

class ExperimentPlanProviderImpl(ExperimentPlanProviderBase):
    def __init__(self, parent_server: Server) -> None:
        self.dataService = DataClient(address="127.0.0.1", port=50052, insecure=True)
        self.optamizer = parent_server.binarysearchcontroller
        super().__init__(parent_server=parent_server)

    def SubmitExperimentDesignPlan(
        self, Target: float, Tolerance: float = 0.001, *, metadata: MetadataDict
    ) -> SubmitExperimentDesignPlan_Responses:
        self.target = Target
        self.tolerance = Tolerance
        self.experiment_plan = {
            "stop": False,
            "concentrationSDS": {
                "concentration": self.optamizer.mid,
                "unit": "mM"
            },
            "needleDiameter": {
                "diameter": 0.68,
                "unit": "cm"
            },
            "density": {
                "density": 0.999,
                "unit": "g/cm3"
            }
        }
        return SubmitExperimentDesignPlan_Responses()

    def CreateExperimentPlan(
        self, PreviousMeasurementItemPath: str, *, metadata: MetadataDict
    ) -> CreateExperimentPlan_Responses:
        surfaceTensionDataItem = self.dataService.DataItemProvider.GetDataItem(ItemPath=PreviousMeasurementItemPath)
        surfaceTension = float(surfaceTensionDataItem.DataItemContent.decode('utf-8'))
        if abs(surfaceTension - self.target) > self.tolerance:
            self.experiment_plan = {
                "stop": False,
                "concentrationSDS": {
                    "concentration": self.optamizer.mid,
                    "unit": "mM"
                },
                "needleDiameter": {
                    "diameter": 0.68,
                    "unit": "cm"
                },
                "density": {
                    "density": 0.999,
                    "unit": "g/cm3"
                }
            }
        else:
            self.experiment_plan = {
                "stop": True
            }
        return CreateExperimentPlan_Responses()
        
    def StoreExperimentPlan(self, ItemPath: str, *, metadata: MetadataDict) -> StoreExperimentPlan_Responses:
        self.dataService.DataItemProvider.CreateDataItem(
            ItemPath=ItemPath,
            Content= json.dumps(self.experiment_plan).encode(encoding='utf-8'),
            ItemProperties=[
                tuple(["creation_time", f"{datetime.datetime.now().timestamp()}"]),
            ]
        )
        return StoreExperimentPlan_Responses()
