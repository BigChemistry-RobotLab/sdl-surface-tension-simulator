# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict

from .binarysearchcontroller_types import (
    CalculateMidPoint_Responses,
    InitializeExperimentParameters_Responses,
    StoreMidPoint_Responses,
    UpdateSearchRange_Responses,
)

if TYPE_CHECKING:

    from ...server import Server


class BinarySearchControllerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """

        Provides commands for implementing the binary search algorithm in laboratory automation applications.
        It facilitates the initialization of experiment parameters, updating the search range based on measurements,
        determining the next experiment step, and storing experiment data.

        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def InitializeExperimentParameters(
        self, High: float, Low: float, Target: float, *, metadata: MetadataDict
    ) -> InitializeExperimentParameters_Responses:
        """
        Initialize the experiment parameters for the binary search algorithm.


        :param High: Upper bound of the search range, defining the end of the search space.

        :param Low: Lower bound of the search range, defining the start of the search space.

        :param Target: Desired value that the algorithm aims to achieve.

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def UpdateSearchRange(self, MeasurementPath: str, *, metadata: MetadataDict) -> UpdateSearchRange_Responses:
        """
        Updates the search range for the binary search algorithm based on the surface tension measurement.


        :param MeasurementPath: Path to the measurement of the previous experiment.

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def CalculateMidPoint(self, *, metadata: MetadataDict) -> CalculateMidPoint_Responses:
        """
        calculates the midpoint of the current search range and checks if the result is within the desired tolerance of the target value.


        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def StoreMidPoint(self, ItemPath: str, *, metadata: MetadataDict) -> StoreMidPoint_Responses:
        """
        Stores the mid point determined by the binary search alrightm.


        :param ItemPath: Storage location of the data item in the form of of a file path.

        :param metadata: The SiLA Client Metadata attached to the call

        """
