# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from binarysearchcontroller_types import (
        CalculateMidPoint_Responses,
        InitializeExperimentParameters_Responses,
        StoreMidPoint_Responses,
        UpdateSearchRange_Responses,
    )
    from sila2.client import ClientMetadataInstance


class BinarySearchControllerClient:
    """

    Provides commands for implementing the binary search algorithm in laboratory automation applications.
    It facilitates the initialization of experiment parameters, updating the search range based on measurements,
    determining the next experiment step, and storing experiment data.

    """

    def InitializeExperimentParameters(
        self, High: float, Low: float, Target: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> InitializeExperimentParameters_Responses:
        """
        Initialize the experiment parameters for the binary search algorithm.
        """
        ...

    def UpdateSearchRange(
        self, MeasurementPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> UpdateSearchRange_Responses:
        """
        Updates the search range for the binary search algorithm based on the surface tension measurement.
        """
        ...

    def CalculateMidPoint(
        self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> CalculateMidPoint_Responses:
        """
        calculates the midpoint of the current search range and checks if the result is within the desired tolerance of the target value.
        """
        ...

    def StoreMidPoint(
        self, ItemPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> StoreMidPoint_Responses:
        """
        Stores the mid point determined by the binary search alrightm.
        """
        ...
