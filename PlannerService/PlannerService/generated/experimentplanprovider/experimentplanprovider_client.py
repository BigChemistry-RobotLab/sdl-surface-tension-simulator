# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from experimentplanprovider_types import (
        CreateExperimentPlan_Responses,
        StoreExperimentPlan_Responses,
        SubmitExperimentDesignPlan_Responses,
    )
    from sila2.client import ClientMetadataInstance


class ExperimentPlanProviderClient:
    """

    TODO (stores plan with target and checks if goal is reached)

    """

    def SubmitExperimentDesignPlan(
        self, Target: float, Tolerance: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SubmitExperimentDesignPlan_Responses:
        """
        Submit experiment design plan.
        """
        ...

    def CreateExperimentPlan(
        self, PreviousMeasurementItemPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> CreateExperimentPlan_Responses:
        """
        Creates new experiment plan for experiment in which a target is to be reached by checking if the goal has been reached.
        """
        ...

    def StoreExperimentPlan(
        self, ItemPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> StoreExperimentPlan_Responses:
        """
        Store experiment plan
        """
        ...
