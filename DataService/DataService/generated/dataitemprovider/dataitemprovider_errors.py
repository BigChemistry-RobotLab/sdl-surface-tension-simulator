# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import Optional

from sila2.framework.errors.defined_execution_error import DefinedExecutionError

from .dataitemprovider_feature import DataItemProviderFeature


class DataNamespaceAlreadyExists(DefinedExecutionError):
    def __init__(self, message: Optional[str] = None):
        if message is None:
            message = "The data namespace with this name already exists."
        super().__init__(
            DataItemProviderFeature.defined_execution_errors["DataNamespaceAlreadyExists"], message=message
        )


class DataNamespaceNameDoesNotExist(DefinedExecutionError):
    def __init__(self, message: Optional[str] = None):
        if message is None:
            message = "The data namespace with this name does not exist."
        super().__init__(
            DataItemProviderFeature.defined_execution_errors["DataNamespaceNameDoesNotExist"], message=message
        )


class DataCollectionAlreadyExists(DefinedExecutionError):
    def __init__(self, message: Optional[str] = None):
        if message is None:
            message = "The data collection with this name already exists."
        super().__init__(
            DataItemProviderFeature.defined_execution_errors["DataCollectionAlreadyExists"], message=message
        )


class DataCollectionDoesNotExists(DefinedExecutionError):
    def __init__(self, message: Optional[str] = None):
        if message is None:
            message = "The data collection with this name does not exists."
        super().__init__(
            DataItemProviderFeature.defined_execution_errors["DataCollectionDoesNotExists"], message=message
        )


class DataItemDoesNotExists(DefinedExecutionError):
    def __init__(self, message: Optional[str] = None):
        if message is None:
            message = "The data item with this name does not exists."
        super().__init__(DataItemProviderFeature.defined_execution_errors["DataItemDoesNotExists"], message=message)
