# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Any, Iterable, List, Optional

    from dataitemprovider_types import (
        CreateDataCollection_Responses,
        CreateDataItem_Responses,
        CreateDataNamespace_Responses,
        GetDataItem_Responses,
    )
    from sila2.client import ClientMetadataInstance


class DataItemProviderClient:
    """

    Storing of experimental data, the experimental workflow produces a uniquely-named container called a data namespace. This data namespace holds data items and data containers.
    Data items represent uniquely-named items of data and data collections are uniquely-named collections of data items.
    Items and collections are referenced to in the form of file paths like so: namespaceName/collectionName/dataItemName.

    """

    def CreateDataNamespace(
        self, DataNamespaceName: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> CreateDataNamespace_Responses:
        """
        Creates a uniquely named data namespace.
        """
        ...

    def CreateDataCollection(
        self, CollectionPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> CreateDataCollection_Responses:
        """
        Create a new data item collection inside of data namespace.
        """
        ...

    def CreateDataItem(
        self,
        ItemPath: str,
        Content: bytes,
        ItemProperties: List[Any],
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> CreateDataItem_Responses:
        """
        Creates a uniquely named data item inside of data collection and namespace.
        """
        ...

    def GetDataItem(
        self, ItemPath: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> GetDataItem_Responses:
        """
        Gets data item by name from collection and namespace.
        """
        ...
