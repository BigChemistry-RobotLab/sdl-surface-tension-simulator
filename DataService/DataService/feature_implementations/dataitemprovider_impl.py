# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING, Any, List

from sila2.server import MetadataDict

from ..generated.dataitemprovider import (
    CreateDataCollection_Responses,
    CreateDataItem_Responses,
    CreateDataNamespace_Responses,
    DataItemProviderBase,
    GetDataItem_Responses,
    DataNamespaceAlreadyExists,
    DataNamespaceNameDoesNotExist,
    DataCollectionAlreadyExists,
    DataCollectionDoesNotExists
)

if TYPE_CHECKING:
    from ..server import Server

class DataItem:
    def __init__(self, name, content, properties):
        self.name = name
        self.content = content
        self.properties = properties

class DataCollection:
    def __init__(self, name):
        self.name = name
        self.dataItems = []

    def GetDataItem(self, name) -> DataItem:
        for item in self.dataItems:
            if item.name == name:
                return item
        return None

    def AddDataItem(self, name, content, properties):
        self.dataItems.append(DataItem(name=name, content=content, properties=properties))

class DataNamespace:
    def __init__(self, name):
        self.name = name
        self.datacollections = []

    def GetDataCollection(self, name) -> DataCollection:
        for collection in self.datacollections:
            if collection.name == name:
                return collection
        return None

    def AddDataCollection(self, name):
        collection = self.GetDataCollection(name=name)
        if collection != None:
            raise DataCollectionAlreadyExists()
        else:
            self.datacollections.append(DataCollection(name=name))

class DataItemProviderImpl(DataItemProviderBase):
    def __init__(self, parent_server: Server) -> None:
        self.dataNamespaces = []
        super().__init__(parent_server=parent_server)
    
    def GetDataNameSpace(self, name) -> DataNamespace:
        for nameSpace in self.dataNamespaces:
            if nameSpace.name == name:
                return nameSpace
        return None

    def CreateDataNamespace(self, DataNamespaceName: str, *, metadata: MetadataDict) -> CreateDataNamespace_Responses:
        namespace = self.GetDataNameSpace(name=DataNamespaceName)
        if namespace != None:
            raise DataNamespaceAlreadyExists()
        else:
            self.dataNamespaces.append(DataNamespace(name=DataNamespaceName))
            return CreateDataNamespace_Responses()

    def CreateDataCollection(self, CollectionPath: str, *, metadata: MetadataDict) -> CreateDataCollection_Responses:
        namespaceName, collectionName = CollectionPath.split("/")
        namespace = self.GetDataNameSpace(name=namespaceName)
        if namespace == None:
            raise DataNamespaceNameDoesNotExist
        else:
            namespace.AddDataCollection(collectionName)
            return CreateDataCollection_Responses()

    def CreateDataItem(
        self, ItemPath: str, Content: bytes, ItemProperties: List[Any], *, metadata: MetadataDict
    ) -> CreateDataItem_Responses:
        namespaceName, collectionName, itemName = ItemPath.split("/")
        namespace = self.GetDataNameSpace(name=namespaceName)
        if namespace == None:
            raise DataNamespaceNameDoesNotExist
        else:
            collection = namespace.GetDataCollection(name=collectionName)
            if collection == None:
                raise DataCollectionDoesNotExists()
            else:
                collection.AddDataItem(name=itemName, content=Content, properties=ItemProperties)
                return CreateDataItem_Responses()

    def GetDataItem(self, ItemPath: str, *, metadata: MetadataDict) -> GetDataItem_Responses:
        namespaceName, collectionName, itemName = ItemPath.split("/")
        namespace = self.GetDataNameSpace(name=namespaceName)
        if namespace == None:
            raise DataNamespaceNameDoesNotExist
        else:
            collection = namespace.GetDataCollection(name=collectionName)
            if collection == None:
                raise DataCollectionDoesNotExists()
            else:
                dataItem = collection.GetDataItem(name=itemName)
                return GetDataItem_Responses(DataItemContent=dataItem.content, ItemProperties=dataItem.properties)
